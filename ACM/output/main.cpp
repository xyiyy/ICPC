/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author xyiyy @https://github.com/xyiyy
 */

#include <iostream>
#include <fstream>

//#####################
//Author:fraud
//Blog: http://www.cnblogs.com/fraud/
//#####################
//#pragma comment(linker, "/STACK:102400000,102400000")
#include <iostream>
#include <sstream>
#include <ios>
#include <iomanip>
#include <functional>
#include <algorithm>
#include <vector>
#include <string>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <climits>
#include <cctype>

using namespace std;
#define XINF INT_MAX
#define INF 0x3FFFFFFF
#define mp(X, Y) make_pair(X,Y)
#define pb(X) push_back(X)
#define rep(X, N) for(int X=0;X<N;X++)
#define rep2(X, L, R) for(int X=L;X<=R;X++)
#define dep(X, R, L) for(int X=R;X>=L;X--)
#define clr(A, X) memset(A,X,sizeof(A))
#define IT iterator
#define ALL(X) (X).begin(),(X).end()
#define PQ std::priority_queue
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
typedef vector<PII> VII;
typedef vector<int> VI;

int getTheAnswer() {
    return 42;
}

int a[1010];

class TaskF {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, k;
        while (in >> n >> k) {
            k--;
            rep(i, n) {
                in >> a[i];
            }
            int f = 0;
            if (!k) {
                out << "Alice" << endl;
                continue;
            } else if (k == 1) {
                a[0] -= (n & 1);
            }
            if (n & 1) {
                f = a[0];
                for (int i = 1; i < n; i += 2)f ^= a[i + 1] - a[i] - 1;
            } else {
                for (int i = 0; i < n; i += 2)f ^= a[i + 1] - a[i] - 1;
            }
            if (f)out << "Alice" << endl;
            else out << "Bob" << endl;
        }
    }
};

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    TaskF solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}